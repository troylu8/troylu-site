<script>
    import PostHeader from "../../components/post-header.svelte";
</script>

<PostHeader 
    title="nearsay"
    subtitle="Geolocation-Based Message Board + Chat"
    date="Jan 2025 - Apr 2025"
    links={[
        {
            icon: "nearsay.jpg",
            href: "https://nearsay.troylu.com",
            label: "nearsay.troylu.com",
        },
        {
            icon: "github.svg",
            href: "https://github.com/troylu8/nearsay",
            label: "source code",
        },
    ]}
/>

Place notes on a map of the world for others to find - you can only place notes
near your current location!

Notes disappear after a week, but can live longer via likes, dislikes, and views.

<div class="img-cont">
    <img src="/img/projects/nearsay/map.png" alt="nearsay map showcase">
    <img src="/img/projects/nearsay/post.png" alt="post screenshot">
    <img src="/img/projects/nearsay/place-note.png" alt="nearsay user placing note">
</div>

I decided on MongoDB partly for its easy to use geospatial queries, 
but also because I was curious about the biggest non-SQL DBMS.

I was worried that the free-flowing nature of MongoDB would clash with the strictness
of Rust, but luckily using the MongoDB Rust driver was very straightforward.

Since server requests happen very rapidly as users pan around the map, I
implemented caching via Redis for repeated queries near the same geographic area.
I was shocked when the app's performance dropped heavily, until I discovered Redis's pipelining feature.

<style>
    .img-cont {
        display: flex;
        gap: 16px;
        
        overflow: scroll;
    }
    img {
        height: 300px;
    }
</style>